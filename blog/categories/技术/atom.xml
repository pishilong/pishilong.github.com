<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: 技术 | 海岩咖啡的部落格]]></title>
  <link href="http://pishilong.github.com/blog/categories/技术/atom.xml" rel="self"/>
  <link href="http://pishilong.github.com/"/>
  <updated>2013-12-13T10:13:25+08:00</updated>
  <id>http://pishilong.github.com/</id>
  <author>
    <name><![CDATA[海岩咖啡]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jquery validation plugin and select2]]></title>
    <link href="http://pishilong.github.com/blog/jquery-validation-plugin-and-select2"/>
    <updated>2013-03-29T11:18:00+08:00</updated>
    <id>http://pishilong.github.com/blog/jquery-validation-plugin-and-select2</id>
    <content type="html"><![CDATA[<p><a href="http://docs.jquery.com/Plugins/Validation">Jquery Validation Plugin</a>是非常棒的验证插件，select2也是一款很不错的select插件，让select更加强大与美观。</p>

<p>Jquery Validation Plugin会默认忽视hidden的元素，而select2会把真正的select隐藏，而用自己的元素进行包裹，这时，select2就无法验证了。</p>

<p>解决方案是：在初始化validator时，设置ignore参数</p>

<p><code>ruby
    $form.validate
      rules:
        'user[channel]':
          required: true
      messages:
        'user[channel]':
          required: '请选择频道'
      #select2把真正的select隐藏了，而jquery validator会忽略需要特殊处理
      ignore: 'input[type=hidden]'
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails ActiveSupport::Concern Object doesn't support#inspect]]></title>
    <link href="http://pishilong.github.com/blog/rails-activesupport-concern"/>
    <updated>2013-03-20T11:06:00+08:00</updated>
    <id>http://pishilong.github.com/blog/rails-activesupport-concern</id>
    <content type="html"><![CDATA[<p>这篇博客记录使用ActiveSupport::Concern对业务进行抽象时，遇到的Object doesn’t support#inspect问题.</p>

<h1 id="section">背景</h1>

<p>树形数据结构在系统中越来越多，而他的很多特性是可以复用的，如果对每一个model都定义相同的方法，声明相同的asscoiation肯定是不科学，于是打算将其抽取出来.</p>

<p>第一个方案打算使用继承,使用通用类继承ActiveRecord::Base 然后其他的树形类再继承这个通用类</p>

<p><code>ruby
  TreeBase &lt; ActiveRecord::Base
  end
  GrammarTree &lt; TreeBase
  end
</code></p>

<p>但是这样会报错，提示在数据库中找不到tree_bases这张表，这是肯定的，于是根据网上的方法，把TreeBase设置成没有表与其对应的虚类，但是Rails还是不吃这一套.</p>

<p><code>ruby
  TreeBase &lt; ActiveRecord::Base
    self.absract_class = true
    @columns = []
  end
</code></p>

<p>于是打算采用module的方案，<a href="http://ruby-china.org/topics/7709">Rails4重大设计决策：“胖”Model用ActiveSupport::Concern瘦身</a>, 那就先采用这个做法试验一下.</p>

<p>```ruby
module TreeBase
  extend ActiveSupport::Concern</p>

<p>included do
    attr_accessible :p_id, :_name, :order_idx, :level, :overall_idx
    belongs_to :parent, class_name: self.class.name, foreign_key: “p_id”
    has_many :children, class_name: self.class.name, foreign_key: “p_id”, dependent: :restrict, order: :order_idx
    validates :node_name, presence: true</p>

<pre><code>default_value_for :level do
  parent.nil? ? 0 : (.parent.level + 1)
end
default_value_for :order_idx do
  if parent.nil?
    (self.class.where(p_id: nil).maximum(:order_idx) || 0) + 1
  else
    (parent.children.maximum(:order_idx) || 0) + 1
  end
end
default_value_for :overall_idx do
  self.compute_overall_idx
end

after_save :reset_index   end
</code></pre>

<p>module ClassMethods
  end</p>

<p>module InstanceMethods
  end
end
```</p>

<p>以上代码的思路很容看清楚，树形结构肯定有<code>parent</code>,也有<code>children</code>,而<code>TreeBase</code>只是提供一个处理框架，具体的表还是得看<code>include</code>了这个<code>module</code>的类，所以在<code>class_name</code>中用的是<code>self.class.name</code>.
同理，在查找节点时，也用的<code>self.class.where(p_id: nil)</code></p>

<h1 id="section-1">问题</h1>

<p>这个时候，问题发生了，找打一个node没问题，但是<code>node.parent</code>的时候，就会报错<code>Object doesn't support#inspect</code>.</p>

<p>最终的原因在于<code>module</code>中<code>included</code>,<code>InstanceMethods</code>,<code>ClassMethods</code>的上下文不一样，<code>InstanceMethods</code>定义的是实例方法，所以默认的上下文就是实例，于是可以这样定义：</p>

<p>```ruby
module TreeBase
  extend ActiveSupport::Concern
  module InstanceMethods
   #判断是否有子节点
    def has_children?
      children.count &gt; 0
    end</p>

<pre><code>#计算全局顺序
def compute_overall_idx
  if parent.nil?
    order_idx.to_s.rjust(2,'0')
  else
    "#{parent.overall_idx}_" + order_idx.to_s.rjust(2,'0')
  end
end   end end ```
</code></pre>

<p><code>children</code>这样的属性或者实例方法能直接调用.</p>

<p>而在<code>included</code>中，上下文是具体的类，所以<code>self</code>是形如<code>GrammarTree</code>这样的具体类,因此<code>self.class</code>就是<code>Class</code>了，而<code>self.class.name</code>就是<code>'Class'</code>，而我们期待的实际是<code>'GrammarTree'</code>，</p>

<p>就这样，出现了<code>Object doesn't support#inspect</code>这个问题，衍生出来的，如果执行<code>node.has_children?</code>，因为<code>node.children</code>已经跪了，再来<code>chidlren.count &gt; 0 </code>就会报错<code>undefined method 'scoped' for Class:Class</code>。</p>

<h1 id="section-2">解决</h1>

<p>把<code>self.class.name</code>改成<code>name</code>,由于已经处于类的上下文，所以直接用<code>name</code>即可.</p>

<p>```ruby
  included do
    attr_accessible :p_id, :node_name, :order_idx, :level, :overall_idx
    belongs_to :parent, class_name: name, foreign_key: “p_id”
    has_many :children, class_name: name, foreign_key: “p_id”, dependent: :restrict, order: :order_idx
    validates :node_name, presence: true</p>

<pre><code>default_value_for :level do |node|
  node.parent.nil? ? 0 : (node.parent.level + 1)
end
default_value_for :order_idx do |node|
  if node.parent.nil?
    (where(p_id: nil).maximum(:order_idx) || 0) + 1
  else
    (node.parent.children.maximum(:order_idx) || 0) + 1
  end
end
default_value_for :overall_idx do |node|
  node.compute_overall_idx
end

after_save :reset_index   end ```
</code></pre>

<p>其中，<code>default_value_for</code>是设置对象默认值的，其上下文应该是实例对象而不是类，所以需要在代码块中传入<code>node</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ckeditor上传文件失败]]></title>
    <link href="http://pishilong.github.com/blog/ckeditorshang-chuan-wen-jian-shi-bai"/>
    <updated>2012-08-08T11:17:00+08:00</updated>
    <id>http://pishilong.github.com/blog/ckeditorshang-chuan-wen-jian-shi-bai</id>
    <content type="html"><![CDATA[<p>Rails: 3.2.6</p>

<p>使用的是Ckeditor的Rails Gem.</p>

<p>突然不能上传文件，控制台显示在上传插入数据库时直接rollback了</p>

<p>于是重载app/controllers/ckeditor/application_controller.rb的respond_with_asset(asset)方法，</p>

<p>将asset.save,改为asset.save!</p>

<p>查看抛出的异常,是文件大小超出范围,显示必须在0-2048 Bytes之间，我还以为是文件没有拷贝过去，于是大小是0。</p>

<p>这时辉神出现了，他指出，2.megabytes不应该是2048啊。于是测试ActiveSupport，这个没问题，网上一搜，才发现，god这个gem重载了这个方法.于是2.megabytes变成了2048</p>

<p>但是最终没有把god注销，而是在代码中直接使用了2<em>2048</em>2048</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ckeditor的逆袭]]></title>
    <link href="http://pishilong.github.com/blog/ckeditorde-ni-xi"/>
    <updated>2012-06-28T11:39:00+08:00</updated>
    <id>http://pishilong.github.com/blog/ckeditorde-ni-xi</id>
    <content type="html"><![CDATA[<p>原本用kindeditor毫无压力，也算支持国产，但是无奈，为了整合数学公式编辑器，只能改用ckeditor或者tinyMCE这两个主流大哥。</p>

<p>而tinyMCE又与Rails不能很好集成，只有原生的插件。一没有gem，二不能上传文件。</p>

<p>于是改用比较成熟的<a href="https://github.com/galetahub/ckeditor">ckeditor</a>，整合rails相当方便，上传等也一应俱全,还提供ActiveRecord, Mongid等持久化支持，和<a href="https://github.com/thoughtbot/paperclip">paperclip</a>,<a href="https://github.com/jnicklas/carrierwave">carrierwave</a>上传插件的支持。</p>

<pre><code>gem "ckeditor", "3.7.1"
rails generate ckeditor:install --orm=active_record --backend=paperclip
</code></pre>

<p>一直使用很顺畅，直到碰到两个很恶心的问题:</p>

<ul>
  <li>
    <p>ckeditor总会把内容自己套一层&lt;p&gt;标签</p>

    <p>这是因为ckeditor对于换行有三种模式，默认是&lt;p&gt;,改成br模式或者div模式即可解决问题，在config.js中加入:
<div>
  <pre><code class='ruby'>config.enterMode = CKEDITOR.ENTER_BR;
config.shiftEnterMode = CKEDITOR.ENTER_BR;</code></pre>
</div>
</p>
  </li>
  <li>
    <p>HTML里面本来&lt;table&gt;标签在<span>标签里面，在kindeditor里面，能正常显示在富文本编辑器里，但是ckeditor会自己把外面的<span>标签移除，然后内嵌到table里的文字周围。</span></span></p>

    <p>原本以为是ckeditor自己怪异的行为，然后几乎花了一天时间去看ckeditor的源码以及详细设置，使用了很多方案:
<div>
  <pre><code class='ruby'>config.removePlugins = ‘scayt’;
config.autoParagraph = false;
config.ignoreEmptyParagraph = false;</code></pre>
</div>
</p>

    <p>都不行，后来在一个帖子里看到，span标签属于inline element,而table属于block element,从规范和合理的角度出发,block是不能内嵌到inline element的。
所以ckeditor进行了检查并处理。确实在ckeditor的dtd中也对各类标签进行了定义</p>
  </li>
</ul>

<p>ckeditor总的来说还是很不错，但是体积比Kindeditor稍大，如果不是特别的需求，我会选择kindeditor.</p>

<p>下一篇着重讲下数学公式编辑器的集成，从官方的php移植到了rails上。</p>

]]></content>
  </entry>
  
</feed>
